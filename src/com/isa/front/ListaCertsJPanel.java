/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.isa.front;

import com.isa.common.ActualCertInfo;
import com.isa.common.FrontCommon;
import com.isa.common.ICommon;
import com.isa.common.ManejadorPaneles;
import com.isa.exception.AppletException;
import com.isa.main.MyTableModel;
import com.isa.token.HandlerToken;
import com.isa.token.Token;
import com.isa.utiles.Utiles;
import com.isa.utiles.UtilesMsg;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author JMiraballes
 */
public class ListaCertsJPanel extends javax.swing.JPanel implements ICommon{

    /**
     * Creates new form ListaCertsJPanel
     */
    public ListaCertsJPanel() {
        initComponents();
        mensaje.setVisible( false );
        addComponentListener( new ComponentAdapter() {
            
            @Override
            public void componentShown ( ComponentEvent e ){
                try {
                    System.out.println ( "Component shown" );
                    cargarCertificados();
                } catch (AppletException ex) {
                    Logger.getLogger(ListaCertsJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    ManejadorPaneles.showPanelMessageError(ex.getMessage());
                }
            }

            @Override
            public void componentHidden ( ComponentEvent e ){
                System.out.println ( "Component hidden" );
            }            
        });
        
        lista.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            
            @Override
            public void valueChanged(ListSelectionEvent event) {
                ActualCertInfo actualCertInfo = ActualCertInfo.getInstance();
                actualCertInfo.setCertIndex(lista.getSelectedRow());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        mensaje = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Certificados"));

        lista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Emisor", "Fecha Validez"
            }
        ));
        lista.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(lista);

        jLabel1.setText("Seleccionar un certificado para firmar:");

        mensaje.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        mensaje.setText("mensaje");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mensaje)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public JLabel getMensaje() {
        return mensaje;
    }

    public void setMensaje(JLabel mensaje) {
        this.mensaje = mensaje;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable lista;
    private javax.swing.JLabel mensaje;
    // End of variables declaration//GEN-END:variables
    
    
    private void cargarCertificados() throws AppletException {
        try{
            HandlerToken handlerToken = ActualCertInfo.getInstance().getHandler();         
            Token token = handlerToken.getTokenActivo();

            //Inicializo el modelo de la lista que despliega los certificados e inserto los mismos
            MyTableModel modelo = new MyTableModel();
            modelo.addColumn("Nombre");
            modelo.addColumn("Emisor");
            modelo.addColumn("Fecha de validez");
            HashMap certs = ActualCertInfo.getInstance().getCerts();
            String cedulaUser = ActualCertInfo.getInstance().getCedula();
            
            KeyStore  keystore = token.getKeystore();
            HashMap aliasHash = new HashMap();
            Enumeration enumer = keystore.aliases();
            for (; enumer.hasMoreElements();){
                String alias = (String) enumer.nextElement();
                X509Certificate c = (X509Certificate) keystore.getCertificate(alias);
                
                //SubjectDN Name: GIVENNAME=WALTER, SURNAME=SUAREZ, SERIALNUMBER=CI 17706166, CN=WALTER SUAREZ AUTENTICACION, OU=PERSONA FISICA, O=WALTER SUAREZ, C=PY
                String docID = Utiles.getDocIDSerialNumber( c.getSubjectDN().getName() );
                Date fechaVencimiento = c.getNotAfter();
                Date fechaInicio = c.getNotBefore();
                Date fechaActual = new Date();
                
                System.out.println( "fechaVencimiento: " + fechaVencimiento );
                System.out.println( "fechaInicio: " + fechaInicio );
                System.out.println( "fechaActual: " + fechaActual );
                
                System.out.println( "Post: " + fechaActual.after(fechaInicio) );
                System.out.println( "Ant: " + fechaActual.before(fechaVencimiento) );
                
                if ( cedulaUser.equals( docID ) && fechaActual.after(fechaInicio) && fechaActual.before(fechaVencimiento) ){
                    String fecha = Utiles.DATE_FORMAT_MIN.format(c.getNotBefore()) + "-" + Utiles.DATE_FORMAT_MIN.format(c.getNotAfter());
                    String [] elem = new String [] { Utiles.getCN(c.getSubjectDN().getName()), Utiles.getCN(c.getIssuerDN().getName()), fecha };
                    certs.put(String.valueOf(certs.size()), c);
                    aliasHash.put(aliasHash.size(), alias);
                    System.out.println( "Certificado: " + aliasHash );
                    modelo.addRow( elem );
                }
            }
            ActualCertInfo.getInstance().setAliasHash(aliasHash);
            ActualCertInfo.getInstance().setCerts(certs);
            
            lista.setModel( modelo ); 
        } 
        catch (KeyStoreException ex) {
            Logger.getLogger(ListaCertsJPanel.class.getName()).log(Level.SEVERE, null, ex);
            throw new AppletException(UtilesMsg.ERROR_CARGANDO_CERTIFICADOS, null, ex.getCause());
        }
    }    
    
    @Override
    public void setFrontPanelSize() {
        setSize(FrontCommon.SIZE_WIDTH, FrontCommon.SIZE_HEIGHT);
    }
    
}
